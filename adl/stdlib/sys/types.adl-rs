module sys.types {

import adlc.config.rust.*;

annotation Maybe RustCustomType {
  "rustname" : "{{STDLIBMODULE}}::customtypes::Maybe",
  "helpers" : "{{STDLIBMODULE}}::customtypes::Maybe",
  "generateOrigADLType" : "MaybeInternal",
  "stdTraits": ["Eq", "PartialEq", "Hash", "Serialize", "Deserialize"]
  };

annotation Map RustCustomType {
  "rustname" : "{{STDLIBMODULE}}::customtypes::Map",
  "helpers" : "{{STDLIBMODULE}}::customtypes::Map",
  "generateOrigADLType" : "MapInternal",
  "stdTraits": ["Eq", "PartialEq", "Serialize", "Deserialize"]
  };

annotation Set RustCustomType {
  "rustname" : "{{STDLIBMODULE}}::customtypes::Set",
  "helpers" : "{{STDLIBMODULE}}::customtypes::Set",
  "generateOrigADLType" : "SetInternal",
  "stdTraits": ["Eq", "PartialEq", "Serialize", "Deserialize"]
  };

annotation Pair RustCustomType {
  "rustname" : "{{STDLIBMODULE}}::customtypes::Pair",
  "helpers" : "{{STDLIBMODULE}}::customtypes::Pair",
  "generateOrigADLType" : "PairInternal",
  "stdTraits": ["Eq", "PartialEq", "Hash", "Serialize", "Deserialize"]
  };

annotation Result RustCustomType {
  "rustname" : "{{STDLIBMODULE}}::customtypes::Result",
  "helpers" : "{{STDLIBMODULE}}::customtypes::Result",
  "generateOrigADLType" : "ResultInternal",
  "stdTraits": ["Eq", "PartialEq", "Hash", "Serialize", "Deserialize"]
  };
};

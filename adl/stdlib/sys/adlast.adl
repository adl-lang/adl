/// Types to represent an ADL syntax tree
module sys.adlast
{

import sys.types.*;

type ModuleName = String;
type Ident = String;

type Annotations = Map<ScopedName,Json>;

struct ScopedName
{
    ModuleName moduleName;
    Ident name;
};

struct ScopedNameTypeRef
{
    ScopedName scopedName;
    Vector<TypeExpr> parameters;
};

union Primitive
{
    Void Void;
    Void String;
    Void Boolean;
    Void Float;
    Void Double;
    Void Int8;
    Void Int16;
    Void Int32;
    Void Int64;
    Void Word8;
    Void Word16;
    Void Word32;
    Void Word64;
    Void ByteVector;
    Void Json;
    TypeExpr Vector;
    TypeExpr StringMap;
    TypeExpr Nullable;
};

union TypeExpr
{
    Primitive primitive;
Â    Ident typeParam;
    ScopedNameTypeRef reference;
};

struct Field
{
    Ident name;
    Ident serializedName;
    TypeExpr typeExpr;
    Maybe<Json> default;
    Annotations annotations;
};

struct Struct
{
    Vector<Ident> typeParams;
    Vector<Field> fields;
};

struct Union
{
    Vector<Ident> typeParams;
    Vector<Field> fields;
};

struct TypeDef
{
    Vector<Ident> typeParams;
    TypeExpr typeExpr;
};

struct NewType
{
    Vector<Ident> typeParams;
    TypeExpr typeExpr;
    Maybe<Json> default;
};

union DeclType
{
    Struct struct_;
    Union union_;
    TypeDef type_;
    NewType newtype_;
};

struct Decl
{
    Ident name;
    DeclType type_;
    Annotations annotations;
};

struct ScopedDecl
{
    ModuleName moduleName;
    Decl decl;
};

union Import
{
    /// Import all names from a module
    ModuleName moduleName;
 
    /// Import a single name from a module
    ScopedName scopedName;
};

struct Module
{
    ModuleName name;
    Vector<Import> imports;
    StringMap<Decl> decls;
    Annotations annotations;
};

struct Model
{
    StringMap<Module> modules;
};

};

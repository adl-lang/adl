/// Some string type aliases, with attributes to derive UI validation
module common.strings
{

import common.ui.ValidRegex;

/// A string that isn't empty, and isn't only whitespace.
type StringNE = String;

annotation StringNE ValidRegex {
  "regex" : "^.*\\S+.*$",
  "description" : "non empty",
  "returnGroup" : 0
};

/// An alphanumeric string, with hyphens for separation.
type StringANH = String;

/// A multi line, free-form text string
type StringML = String;

annotation StringANH ValidRegex {
  "regex" : "^[A-Za-z][A-Za-z0-9-]*$",
  "description" : "alphanumeric",
  "returnGroup" : 0
};

/// An email address
type EmailAddress = String;

// see https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression
// The regex below allows whitespace before and after the email address, but the first match group excludes these.
annotation EmailAddress ValidRegex {
  "regex" : "^\\s*((?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\]))\\s*$",
  "description" : "an email address",
  "returnGroup" : 1
};

/// A markdown text string
type StringMD = String;

/// A password, which cannot be empty. Other constraints
/// are application specific.
type Password = String;

};
